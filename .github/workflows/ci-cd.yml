name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package.json
          
      - name: Install dependencies
        run: |
          cd app
          npm ci
          
      - name: Run tests
        run: |
          cd app
          npm test
        env:
          MONGODB_URI: mongodb://localhost:27017/todos_test
          NODE_ENV: test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/todo-api:latest
            ${{ secrets.DOCKER_USERNAME }}/todo-api:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/todo-api:latest
          cache-to: type=inline
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.TARGET_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to Target Node
        env:
          TARGET_HOST: ${{ secrets.TARGET_HOST }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ssh ubuntu@$TARGET_HOST "cd /opt/multi-container-service && \
          git pull && \
          sudo docker compose pull && \
          sudo docker compose up -d --force-recreate api && \
          sudo docker system prune -af --volumes"
          
      - name: Health Check
        env:
          TARGET_HOST: ${{ secrets.TARGET_HOST }}
        run: |
          for i in {1..12}; do
            if curl -sf http://$TARGET_HOST/health; then
              echo "Application is healthy"
              exit 0
            fi
            echo "Waiting for application to be healthy..."
            sleep 10
          done
          echo "Health check failed after 2 minutes"
          exit 1
